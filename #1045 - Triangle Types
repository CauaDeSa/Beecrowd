#include <stdio.h>
#include <math.h>
#define MAXSIZE 3

void getData(double values[]);

int triangle(double values[]);
int rectangle(double values[]);
int obtuse(double values[]);
int acutangulus(double values[]);
int equilateral(double values[]);
int isoceles(double values[]);

int main() {
    double values[MAXSIZE];

    getData(values);   
    
    if (triangle(values))
        printf("NAO FORMA TRIANGULO\n");
    
    else
    {
        if (rectangle(values))
            printf("TRIANGULO RETANGULO\n");

        if (obtuse(values))
            printf("TRIANGULO OBTUSANGULO\n");

        if (acutangulus(values))
            printf("TRIANGULO ACUTANGULO\n");

        if (equilateral(values))
            printf("TRIANGULO EQUILATERO\n"); 

        else
            if (isoceles(values))
                printf("TRIANGULO ISOSCELES\n");        
    }
        
    return 0;
}

void getData(double values[]){
    int i;
    double change;

    for (i = 0; i < MAXSIZE; i++)
    {
        scanf("%lf", &values[i]);
    }

    for (i = 0; i < MAXSIZE - 1; i++)
    {
        if (values[i] < values[i + 1])
        {
            change = values[i];
            values[i] = values[i + 1];
            values[i + 1] = change;

            i = -1;
        }
    }   
}

int triangle(double values[]){

    if (values[0] >= (values[1] + values[2]))
        return 1;

    return 0;    
}

int rectangle(double values[]){
    
    if(pow(values[0], 2) == (pow(values[1], 2) + pow(values[2], 2)))
        return 1;
    
    return 0;    
}

int obtuse(double values[]){

    if(pow(values[0], 2) > (pow(values[1], 2) + pow(values[2], 2)))
        return 1;

    return 0;
}

int acutangulus(double values[]){

    if(pow(values[0], 2) < (pow(values[1], 2) + pow(values[2], 2)))
        return 1;

    return 0;
}

int equilateral(double values[]){
     if(values[0] == values[1] && values[1] == values[2])
        return 1;

    return 0;
}

int isoceles(double values[]){
    
    if(values[0] == values[1] && values[1] != values[2])
        return 1;

    else
        if(values[0] != values[1] && values [1] == values[2])
            return 1;

        else
            if(values[0] == values[2] && values[0] != values[1])
                return 1;    
    
    return 0;
}
